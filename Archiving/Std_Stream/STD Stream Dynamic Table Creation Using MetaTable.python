{"version":"NotebookV1","origId":2709619314156503,"name":"STD Stream Dynamic Table Creation Using MetaTable","language":"python","commands":[{"version":"CommandV1","origId":2028773725811419,"guid":"493aacc0-5fc7-4547-8589-63c73bc479c5","subtype":"script","commandType":"auto","position":7.25,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1663853719027,"submitTime":0,"finishTime":1663853719044,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["576610cd-0a00-402d-b765-a445602856c2"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["html",27]],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"c72dfa99-5a5d-4e02-9824-1b5323724f9e"},{"version":"CommandV1","origId":2028773725811420,"guid":"8f1af4b9-7554-464a-af22-7d3f8ed787ff","subtype":"script","commandType":"auto","position":7.5,"command":"","commandVersion":80,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1663853719048,"submitTime":0,"finishTime":1663853719065,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["576610cd-0a00-402d-b765-a445602856c2"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["html",27]],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"b79b8f9b-d062-4fd3-b310-8342a785c7a0"},{"version":"CommandV1","origId":2028773725811421,"guid":"ad543963-45b3-40c5-93fa-c4ad23842294","subtype":"script","commandType":"auto","position":7.75,"command":"","commandVersion":104,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">Your Metadata dataframe is loaded\nUse following syntax to grab it\n &lt;new dataframe&gt; = load_metadata_df(&lt;path of metadata csv&gt;) \n\n\nNOTE : csv path parameter is optional as Functions uses default path\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1663853719069,"submitTime":0,"finishTime":1663853719081,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["576610cd-0a00-402d-b765-a445602856c2"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["html",237]],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"1beb3524-a0fc-41a8-b8e2-72722bf751f1"},{"version":"CommandV1","origId":2709619314156504,"guid":"5ecd378c-c13f-4579-8fce-51612bff39d0","subtype":"command","commandType":"auto","position":2.0,"command":"#%run \"/EDA/Data Engineer/Framework/Secrets-Databricks-Cache\"","commandVersion":2,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"78462d04-9b0e-4b70-97b8-654c3ccbc79f"},{"version":"CommandV1","origId":2709619314156505,"guid":"850da9c3-c011-4442-a023-73eaa06936e1","subtype":"command","commandType":"auto","position":3.0,"command":"from pyspark.sql.functions import *","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"78f2c2cd-b6fc-4abf-a026-c736b04aea87"},{"version":"CommandV1","origId":2709619314156506,"guid":"3e546ece-7c7b-478d-871b-db02c74c1c1d","subtype":"command","commandType":"auto","position":4.0,"command":"#SET TABLE NAME\ndbutils.widgets.text(\"table_name\", \"\", \"table name\")\ntable_name = dbutils.widgets.get(\"table_name\")\n\n#SET BRONZE DATABASE NAME\ndbutils.widgets.text(\"db_name\", \"\", \"db name\")\ndb_name = dbutils.widgets.get(\"db_name\")\n\n#SET FINAL DATABASE NAME\ndbutils.widgets.text(\"final_db_name\", \"\", \"final db name\")\nfinal_db_name = dbutils.widgets.get(\"final_db_name\")\n\n#SET METADATA FILEPATH in ADLS (For Example = abfss://dev@dtecuprodedaadl02.dfs.core.windows.net/ISU_archive_support/metadata/Final_metadata.csv)\ndbutils.widgets.text(\"metafilepath\", \"\", \"METADATA FILEPATH\")\nmetafilepath = dbutils.widgets.get(\"metafilepath\")\n\n#SET SILVER LOCATION\ndbutils.widgets.text(\"curated_location\", \"\", \"curated location\")\ncurated_location = \"'\" + dbutils.widgets.get(\"curated_location\") + \"/\" + table_name + \"/'\"\n\n#SET BRONZE LOCATION\ndbutils.widgets.text(\"bronze_location\", \"\", \"bronze location\")\nbronze_location = \"'\" + dbutils.widgets.get(\"bronze_location\") + \"/\" + table_name + \"/'\"\n\n# SET FULL LOAD = Yes/No\ndbutils.widgets.text(\"FULL_LOAD\", \"No\", \"FULL LOAD\")\nFULL_LOAD = dbutils.widgets.get(\"FULL_LOAD\")\n\n# Set DBFS log file path\ndbutils.widgets.text(\"dbfslogbasepath\", \"\", \"DBFS LOG FILE PATH\")\ndbfslogbasepath = dbutils.widgets.get(\"dbfslogbasepath\")\n","commandVersion":26,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{"curated_location":"","table_name":"","metafilepath":"","dbfslogbasepath":"","db_name":"","final_db_name":"","FULL_LOAD":"No","bronze_location":""},"addedWidgets":{"curated_location":{"widgetType":"text","name":"curated_location","defaultValue":"","label":"curated location","options":{"widgetType":"text","validationRegex":null}},"table_name":{"widgetType":"text","name":"table_name","defaultValue":"","label":"table name","options":{"widgetType":"text","validationRegex":null}},"metafilepath":{"widgetType":"text","name":"metafilepath","defaultValue":"","label":"METADATA FILEPATH","options":{"widgetType":"text","validationRegex":null}},"dbfslogbasepath":{"widgetType":"text","name":"dbfslogbasepath","defaultValue":"","label":"DBFS LOG FILE PATH","options":{"widgetType":"text","validationRegex":null}},"db_name":{"widgetType":"text","name":"db_name","defaultValue":"","label":"db name","options":{"widgetType":"text","validationRegex":null}},"final_db_name":{"widgetType":"text","name":"final_db_name","defaultValue":"","label":"final db name","options":{"widgetType":"text","validationRegex":null}},"FULL_LOAD":{"widgetType":"text","name":"FULL_LOAD","defaultValue":"No","label":"FULL LOAD","options":{"widgetType":"text","validationRegex":null}},"bronze_location":{"widgetType":"text","name":"bronze_location","defaultValue":"","label":"bronze location","options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1663838598869,"submitTime":1663838597509,"finishTime":1663838598893,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["html",27]],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"b574d1f2-d22a-44a3-9c65-6ab40a3a0400"},{"version":"CommandV1","origId":2709619314156507,"guid":"58945a77-5e47-41a3-9199-ed4490ebb144","subtype":"command","commandType":"auto","position":5.0,"command":"print(table_name)","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"30cf97df-3026-421a-93d9-9a57bc9d42c1"},{"version":"CommandV1","origId":2709619314156508,"guid":"96bcea9b-e5f8-423b-a3e2-379a6d5c78aa","subtype":"command","commandType":"auto","position":6.0,"command":"#START LOGGING\n\nimport logging\nimport datetime\n\n#TAG LOGGING INFO TO NOTEBOOK\nlogger = logging.getLogger('TableCreationNotebook')\n\n#SETTING THRESHOLD OF LOGGER TO INFO\nlogger.setLevel(logging.INFO)\n\nFilehandler = logging.FileHandler(dbfslogbasepath,mode = 'a')\n\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')\nFilehandler.setFormatter(formatter)\n\nlogger.addHandler(Filehandler)\n\n#LOG INFO\nlogger.info(\"TableCreation is Running... \")","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"9fb0e52f-70bd-44cf-a474-9921af40d917"},{"version":"CommandV1","origId":2709619314156509,"guid":"576610cd-0a00-402d-b765-a445602856c2","subtype":"command","commandType":"auto","position":7.0,"command":"%run \"../Metadata/Load_Metadata\"","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1663853718965,"submitTime":1663853718965,"finishTime":1663853719441,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"5b73131a-4088-42b2-902a-7a3e8c13a470"},{"version":"CommandV1","origId":2709619314156510,"guid":"84ddd778-a3fd-4669-a8d8-5fbe4e5a9db5","subtype":"command","commandType":"auto","position":8.0,"command":"metadf = load_metadata_df(metafilepath)","commandVersion":1,"state":"error","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{"isDbfsCommandResult":false}},"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":"<span class=\"ansi-red-fg\">IllegalArgumentException</span>: Can not create a Path from an empty string","errorTraceType":"html","error":"<div class=\"ansiout\"><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">IllegalArgumentException</span>                  Traceback (most recent call last)\n<span class=\"ansi-green-fg\">&lt;command-2709619314156510&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span><span class=\"ansi-red-fg\"> </span>metadf <span class=\"ansi-blue-fg\">=</span> load_metadata_df<span class=\"ansi-blue-fg\">(</span>metafilepath<span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">&lt;command-2937788264270976&gt;</span> in <span class=\"ansi-cyan-fg\">load_metadata_df</span><span class=\"ansi-blue-fg\">(metadata_path)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      2</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">      3</span> <span class=\"ansi-green-fg\">def</span> load_metadata_df<span class=\"ansi-blue-fg\">(</span>metadata_path<span class=\"ansi-blue-fg\">=</span><span class=\"ansi-blue-fg\">&#34;abfss://dev@dtecuprodedaadl02.dfs.core.windows.net/ISU_archive_support/metadata/Final_metadata.csv&#34;</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">----&gt; 4</span><span class=\"ansi-red-fg\">   </span>metadataDF <span class=\"ansi-blue-fg\">=</span> spark<span class=\"ansi-blue-fg\">.</span>read<span class=\"ansi-blue-fg\">.</span>option<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;header&#34;</span><span class=\"ansi-blue-fg\">,</span> <span class=\"ansi-blue-fg\">&#34;true&#34;</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">.</span>csv<span class=\"ansi-blue-fg\">(</span>metadata_path<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">      5</span>   with_delta_types_DF = metadataDF.withColumn(&#34;delta_types&#34;, when(col(&#34;Data_Type&#34;) == None,&#34;STRING&#34;)\n<span class=\"ansi-green-intense-fg ansi-bold\">      6</span>                                     <span class=\"ansi-blue-fg\">.</span>when<span class=\"ansi-blue-fg\">(</span>col<span class=\"ansi-blue-fg\">(</span><span class=\"ansi-blue-fg\">&#34;Data_Type&#34;</span><span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-blue-fg\">==</span> <span class=\"ansi-blue-fg\">&#34;CLNT&#34;</span><span class=\"ansi-blue-fg\">,</span><span class=\"ansi-blue-fg\">&#34;STRING&#34;</span><span class=\"ansi-blue-fg\">)</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/readwriter.py</span> in <span class=\"ansi-cyan-fg\">csv</span><span class=\"ansi-blue-fg\">(self, path, schema, sep, encoding, quote, escape, comment, header, inferSchema, ignoreLeadingWhiteSpace, ignoreTrailingWhiteSpace, nullValue, nanValue, positiveInf, negativeInf, dateFormat, timestampFormat, maxColumns, maxCharsPerColumn, maxMalformedLogPerPartition, mode, columnNameOfCorruptRecord, multiLine, charToEscapeQuoteEscaping, samplingRatio, enforceSchema, emptyValue, locale, lineSep, pathGlobFilter, recursiveFileLookup, modifiedBefore, modifiedAfter, unescapedQuoteHandling)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    408</span>             path <span class=\"ansi-blue-fg\">=</span> <span class=\"ansi-blue-fg\">[</span>path<span class=\"ansi-blue-fg\">]</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    409</span>         <span class=\"ansi-green-fg\">if</span> type<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span> <span class=\"ansi-blue-fg\">==</span> list<span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-fg\">--&gt; 410</span><span class=\"ansi-red-fg\">             </span><span class=\"ansi-green-fg\">return</span> self<span class=\"ansi-blue-fg\">.</span>_df<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">.</span>_jreader<span class=\"ansi-blue-fg\">.</span>csv<span class=\"ansi-blue-fg\">(</span>self<span class=\"ansi-blue-fg\">.</span>_spark<span class=\"ansi-blue-fg\">.</span>_sc<span class=\"ansi-blue-fg\">.</span>_jvm<span class=\"ansi-blue-fg\">.</span>PythonUtils<span class=\"ansi-blue-fg\">.</span>toSeq<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    411</span>         <span class=\"ansi-green-fg\">elif</span> isinstance<span class=\"ansi-blue-fg\">(</span>path<span class=\"ansi-blue-fg\">,</span> RDD<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    412</span>             <span class=\"ansi-green-fg\">def</span> func<span class=\"ansi-blue-fg\">(</span>iterator<span class=\"ansi-blue-fg\">)</span><span class=\"ansi-blue-fg\">:</span>\n\n<span class=\"ansi-green-fg\">/databricks/spark/python/lib/py4j-0.10.9.1-src.zip/py4j/java_gateway.py</span> in <span class=\"ansi-cyan-fg\">__call__</span><span class=\"ansi-blue-fg\">(self, *args)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">   1302</span> \n<span class=\"ansi-green-intense-fg ansi-bold\">   1303</span>         answer <span class=\"ansi-blue-fg\">=</span> self<span class=\"ansi-blue-fg\">.</span>gateway_client<span class=\"ansi-blue-fg\">.</span>send_command<span class=\"ansi-blue-fg\">(</span>command<span class=\"ansi-blue-fg\">)</span>\n<span class=\"ansi-green-fg\">-&gt; 1304</span><span class=\"ansi-red-fg\">         return_value = get_return_value(\n</span><span class=\"ansi-green-intense-fg ansi-bold\">   1305</span>             answer, self.gateway_client, self.target_id, self.name)\n<span class=\"ansi-green-intense-fg ansi-bold\">   1306</span> \n\n<span class=\"ansi-green-fg\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansi-cyan-fg\">deco</span><span class=\"ansi-blue-fg\">(*a, **kw)</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    121</span>                 <span class=\"ansi-red-fg\"># Hide where the exception came from that shows a non-Pythonic</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    122</span>                 <span class=\"ansi-red-fg\"># JVM exception message.</span>\n<span class=\"ansi-green-fg\">--&gt; 123</span><span class=\"ansi-red-fg\">                 </span><span class=\"ansi-green-fg\">raise</span> converted <span class=\"ansi-green-fg\">from</span> <span class=\"ansi-green-fg\">None</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    124</span>             <span class=\"ansi-green-fg\">else</span><span class=\"ansi-blue-fg\">:</span>\n<span class=\"ansi-green-intense-fg ansi-bold\">    125</span>                 <span class=\"ansi-green-fg\">raise</span>\n\n<span class=\"ansi-red-fg\">IllegalArgumentException</span>: Can not create a Path from an empty string</div>","workflows":[],"startTime":1663853720850,"submitTime":1663853720850,"finishTime":1663853721070,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[["html",27]],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"6d835566-49f0-4274-a25a-e6da0a600430"},{"version":"CommandV1","origId":2709619314156511,"guid":"977a3245-ede1-4f87-a039-11fcbd95b421","subtype":"command","commandType":"auto","position":9.0,"command":"with_reqd_col_DF = metadf.select(\"*\").where(col(\"Table_Name\") == table_name )","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"38b51277-d308-40b6-9072-2f6c9bafb183"},{"version":"CommandV1","origId":2709619314156512,"guid":"9fd794f1-af3b-4d7b-b1e1-561d6c8ef67a","subtype":"command","commandType":"auto","position":10.0,"command":"# FUNCTION TO GENERATE TABLE SCHEMA FROM META DATA FILE\n\ndef generate_schema(column_name,types_name,comment,M_DF,zone):\n    columns_list = M_DF.select(column_name).rdd.map(lambda x : x[0]).collect()\n    types_list = M_DF.select(types_name).rdd.map(lambda x : x[0]).collect()\n    col1 =\"(\"\n    col2 =\"\"\n    for i,j in zip(columns_list,types_list):\n        col1 = col1 + \" \" + i + \" \" + j + \" \" + ', '\n    partition_check = M_DF.select(\"Field_Name\").where(col(\"Partition_Key\") == 'Y').rdd.map(lambda x : x[0]).collect()\n    if zone == 'silver':\n        if partition_check:\n            return col1 + \"partitioncol STRING, EPOCH_FLAG STRING, EDA_Creation_date TIMESTAMP ) \"\n        else:\n            return col1 + \"EPOCH_FLAG STRING, EDA_Creation_date TIMESTAMP ) \"\n    elif zone == 'bronze':\n        if partition_check:\n            return col1 + \"partitioncol STRING, EPOCH_FLAG STRING, EDA_Creation_date TIMESTAMP, BATCH_date Date ) \"\n        else:\n            return col1 + \"EPOCH_FLAG STRING, EDA_Creation_date TIMESTAMP, BATCH_date Date ) \"","commandVersion":50,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"6f829b2d-4853-489e-b7b3-526e78ef2047"},{"version":"CommandV1","origId":2709619314156513,"guid":"d5a8f030-b88e-42e3-aa82-b762d17e6903","subtype":"command","commandType":"auto","position":11.0,"command":"# CALL GENERATE_SCHEMA FUNCTION BY PASSING ARGUMENTS\n \ntry:\n    getschema_b = generate_schema(\"Field_Name\",\"delta_types\",\"Description\",with_reqd_col_DF,\"bronze\")\n    getschema_s = generate_schema(\"Field_Name\",\"delta_types\",\"Description\",with_reqd_col_DF,\"silver\")\n    print(getschema_b)\n    print()\n    print(getschema_s)\n    logger.info(\"Generate Table Schema succeeded : refer cmd 10\")\nexcept Exception as e:\n    logger.error(\"Generate Table Schema FAILED : refer cmd 10 : \" + str(e))\n","commandVersion":17,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"76742bc9-4171-41d6-802e-276fb5986d4b"},{"version":"CommandV1","origId":2709619314156514,"guid":"1af4b950-0277-4628-a0ee-df508ddc808f","subtype":"command","commandType":"auto","position":12.0,"command":"#IF CONDITION FOR TABLES WITH PARTITION AND WITHOUT PARTITION\n\ntry:\n    main_table = table_name + '_STREAM'\n    #main_table_view = table_name + '_STREAM_DISTINCT'\n    #final_main_table = table_name\n    \n    if(str(FULL_LOAD) == 'Yes'):\n        spark.sql(f\"\"\" DROP TABLE IF EXISTS {db_name}.{main_table} \"\"\")\n        #spark.sql(f\"\"\" DROP TABLE IF EXISTS {final_db_name}.{final_main_table} \"\"\")\n        #spark.sql(f\"\"\" DROP VIEW IF EXISTS {db_name}.{main_table_view} \"\"\")\n        print(f\"\"\" DROP TABLE IF EXISTS {db_name}.{main_table} \"\"\")\n        #print(f\"\"\" DROP TABLE IF EXISTS {final_db_name}.{final_main_table} \"\"\")\n    \n    ifpartitiontable = metadf.select(\"Field_Name\").where(col(\"Table_Name\")==table_name).where(col(\"Partition_Key\") == 'Y').rdd.map(lambda x : x[0]).collect()\n    print(ifpartitiontable)\n    if ifpartitiontable:\n        print(f\"\"\" CREATE TABLE IF NOT EXISTS {db_name}.{main_table} {getschema_b} USING DELTA PARTITIONED BY (partitioncol) LOCATION {bronze_location} \"\"\")  \n        #print(f\"\"\" CREATE TABLE IF NOT EXISTS {final_db_name}.{final_main_table} {getschema_s} USING DELTA PARTITIONED BY (partitioncol) LOCATION {curated_location} \"\"\") \n        spark.sql(f\"\"\" CREATE TABLE IF NOT EXISTS {db_name}.{main_table} {getschema_b} USING DELTA LOCATION {bronze_location} \"\"\")  \n        #spark.sql(f\"\"\" CREATE TABLE IF NOT EXISTS {final_db_name}.{final_main_table} {getschema_s} USING DELTA PARTITIONED BY (partitioncol) LOCATION {curated_location} \"\"\")\n        #spark.sql(f\"\"\" CREATE VIEW IF NOT EXIST {db_name}.{main_table_view} AS SELECT * FROM {final_db_name}.{final_main_table} WHERE EPOCH_FLAG = 'CURRENT' \"\"\")\n\n    else:\n        print(f\"\"\" CREATE TABLE IF NOT EXISTS {db_name}.{main_table} {getschema_b} USING DELTA LOCATION {bronze_location} \"\"\")     \n        #print(f\"\"\" CREATE TABLE IF NOT EXISTS {final_db_name}.{final_main_table} {getschema_s} USING DELTA LOCATION {curated_location} \"\"\")  \n        spark.sql(f\"\"\" CREATE TABLE IF NOT EXISTS {db_name}.{main_table} {getschema_b} USING DELTA LOCATION {bronze_location} \"\"\")     \n        #spark.sql(f\"\"\" CREATE TABLE IF NOT EXISTS {final_db_name}.{final_main_table} {getschema_s} USING DELTA LOCATION {curated_location} \"\"\")\n        #spark.sql(f\"\"\" CREATE VIEW IF NOT EXIST {db_name}.{main_table_view} AS SELECT * FROM {final_db_name}.{final_main_table} WHERE EPOCH_FLAG = 'CURRENT' \"\"\")\n\nexcept Exception as e:\n    print(str(e))\n    logger.error(\"Create/Drop Table FAILED : refer cmd 11 : \" + str(e))","commandVersion":154,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"63d5042f-39d3-4633-8873-5484ac498cb5"}],"dashboards":[],"guid":"1d2305f1-8e12-4991-a106-01fe123183c9","globalVars":{},"iPythonMetadata":null,"inputWidgets":{"curated_location":{"nuid":"cb885277-a26b-4325-9c34-c34c80586282","currentValue":"","widgetInfo":{"widgetType":"text","name":"curated_location","defaultValue":"","label":"curated location","options":{"widgetType":"text","validationRegex":null}}},"table_name":{"nuid":"7b625fbe-2c4e-4913-a94f-4d86f38e2606","currentValue":"","widgetInfo":{"widgetType":"text","name":"table_name","defaultValue":"","label":"table name","options":{"widgetType":"text","validationRegex":null}}},"metafilepath":{"nuid":"939d88aa-24f0-4917-a832-7ac09a77f411","currentValue":"","widgetInfo":{"widgetType":"text","name":"metafilepath","defaultValue":"","label":"METADATA FILEPATH","options":{"widgetType":"text","validationRegex":null}}},"dbfslogbasepath":{"nuid":"6ba6edb8-343d-4d80-8572-b1b3f05f32d4","currentValue":"","widgetInfo":{"widgetType":"text","name":"dbfslogbasepath","defaultValue":"","label":"DBFS LOG FILE PATH","options":{"widgetType":"text","validationRegex":null}}},"db_name":{"nuid":"4df9e744-c3a4-4227-9d55-aed27704848a","currentValue":"","widgetInfo":{"widgetType":"text","name":"db_name","defaultValue":"","label":"db name","options":{"widgetType":"text","validationRegex":null}}},"final_db_name":{"nuid":"e546a6b0-8445-4739-b364-dd9639a7a62e","currentValue":"","widgetInfo":{"widgetType":"text","name":"final_db_name","defaultValue":"","label":"final db name","options":{"widgetType":"text","validationRegex":null}}},"FULL_LOAD":{"nuid":"631e03be-6679-477b-851b-058f57edfe66","currentValue":"No","widgetInfo":{"widgetType":"text","name":"FULL_LOAD","defaultValue":"No","label":"FULL LOAD","options":{"widgetType":"text","validationRegex":null}}},"bronze_location":{"nuid":"40d08c9e-d9a6-491b-83f8-32ce613f703a","currentValue":"","widgetInfo":{"widgetType":"text","name":"bronze_location","defaultValue":"","label":"bronze location","options":{"widgetType":"text","validationRegex":null}}}},"notebookMetadata":{"pythonIndentUnit":4},"reposExportFormat":"SOURCE"}